#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geckon.Octopus.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Octopus")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgent(Agent instance);
    partial void UpdateAgent(Agent instance);
    partial void DeleteAgent(Agent instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertAssembly(Assembly instance);
    partial void UpdateAssembly(Assembly instance);
    partial void DeleteAssembly(Assembly instance);
    partial void InsertDestination(Destination instance);
    partial void UpdateDestination(Destination instance);
    partial void DeleteDestination(Destination instance);
    partial void InsertExecutionSlot(ExecutionSlot instance);
    partial void UpdateExecutionSlot(ExecutionSlot instance);
    partial void DeleteExecutionSlot(ExecutionSlot instance);
    partial void InsertExecutionSlot_Plugin_Join(ExecutionSlot_Plugin_Join instance);
    partial void UpdateExecutionSlot_Plugin_Join(ExecutionSlot_Plugin_Join instance);
    partial void DeleteExecutionSlot_Plugin_Join(ExecutionSlot_Plugin_Join instance);
    partial void InsertPlugin(Plugin instance);
    partial void UpdatePlugin(Plugin instance);
    partial void DeletePlugin(Plugin instance);
    partial void InsertWatchFolder(WatchFolder instance);
    partial void UpdateWatchFolder(WatchFolder instance);
    partial void DeleteWatchFolder(WatchFolder instance);
    partial void InsertJobTemplate(JobTemplate instance);
    partial void UpdateJobTemplate(JobTemplate instance);
    partial void DeleteJobTemplate(JobTemplate instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    #endregion
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agent> Agents
		{
			get
			{
				return this.GetTable<Agent>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Assembly> Assemblies
		{
			get
			{
				return this.GetTable<Assembly>();
			}
		}
		
		public System.Data.Linq.Table<Destination> Destinations
		{
			get
			{
				return this.GetTable<Destination>();
			}
		}
		
		public System.Data.Linq.Table<ExecutionSlot> ExecutionSlots
		{
			get
			{
				return this.GetTable<ExecutionSlot>();
			}
		}
		
		public System.Data.Linq.Table<ExecutionSlot_Plugin_Join> ExecutionSlot_Plugin_Joins
		{
			get
			{
				return this.GetTable<ExecutionSlot_Plugin_Join>();
			}
		}
		
		public System.Data.Linq.Table<Plugin> Plugins
		{
			get
			{
				return this.GetTable<Plugin>();
			}
		}
		
		public System.Data.Linq.Table<AssemblyInfo> AssemblyInfos
		{
			get
			{
				return this.GetTable<AssemblyInfo>();
			}
		}
		
		public System.Data.Linq.Table<PluginInfo> PluginInfos
		{
			get
			{
				return this.GetTable<PluginInfo>();
			}
		}
		
		public System.Data.Linq.Table<WatchFolder> WatchFolders
		{
			get
			{
				return this.GetTable<WatchFolder>();
			}
		}
		
		public System.Data.Linq.Table<JobTemplate> JobTemplates
		{
			get
			{
				return this.GetTable<JobTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Agent_GetBy")]
		public ISingleResult<Agent> Agent_GetBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateCreated", DbType="DateTime")] System.Nullable<System.DateTime> dateCreated)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, dateCreated);
			return ((ISingleResult<Agent>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AssemblyInfo_Get")]
		public ISingleResult<AssemblyInfo> AssemblyInfo_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="VarChar(64)")] string version, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(512)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Filename", DbType="VarChar(1024)")] string filename, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WriteURL", DbType="VarChar(1024)")] string writeURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadURL", DbType="VarChar(1024)")] string readURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreatedDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> createdDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAnd", DbType="Bit")] System.Nullable<bool> isAnd)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, version, name, filename, writeURL, readURL, createdDate, isAnd);
			return ((ISingleResult<AssemblyInfo>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExecutionSlot_GetBy")]
		public ISingleResult<ExecutionSlot> ExecutionSlot_GetBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AgentID", DbType="Int")] System.Nullable<int> agentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxSlots", DbType="Int")] System.Nullable<int> maxSlots, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateCreated", DbType="DateTime")] System.Nullable<System.DateTime> dateCreated)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, agentID, maxSlots, dateCreated);
			return ((ISingleResult<ExecutionSlot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PluginInfo_GetBy")]
		public ISingleResult<PluginInfo> PluginInfo_GetBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PluginID", DbType="Int")] System.Nullable<int> pluginID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExecutionSlotID", DbType="Int")] System.Nullable<int> executionSlotID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="VarChar(64)")] string version, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(MAX)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Assemblyname", DbType="VarChar(512)")] string assemblyname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Classname", DbType="VarChar(512)")] string classname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WriteURL", DbType="VarChar(2048)")] string writeURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadURL", DbType="VarChar(2048)")] string readURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreatedDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> createdDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pluginID, executionSlotID, name, version, description, assemblyname, classname, writeURL, readURL, createdDate);
			return ((ISingleResult<PluginInfo>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_Clean")]
		public int Test_Clean()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_InsertDemoData")]
		public int Test_InsertDemoData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="APP_Path", DbType="VarChar(1024)")] string aPP_Path)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aPP_Path);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_CleanAndInsertDummyData")]
		public int Test_CleanAndInsertDummyData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="APP_Path", DbType="VarChar(1024)")] string aPP_Path)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aPP_Path);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_Insert")]
		public int Test_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="APP_Path", DbType="VarChar(1024)")] string aPP_Path)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aPP_Path);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.WatchFolder_Get")]
		public ISingleResult<WatchFolder> WatchFolder_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsEnabled", DbType="Bit")] System.Nullable<bool> isEnabled)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, isEnabled);
			return ((ISingleResult<WatchFolder>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.JobTemplate_Create")]
		public ISingleResult<JobTemplate> JobTemplate_Create([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(MAX)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TemplateUri", DbType="NVarChar(MAX)")] string templateUri)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, templateUri);
			return ((ISingleResult<JobTemplate>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.JobTemplate_Get")]
		public ISingleResult<JobTemplate> JobTemplate_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(MAX)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name);
			return ((ISingleResult<JobTemplate>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Job_Update")]
		public ISingleResult<Job> Job_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusID", DbType="Int")] System.Nullable<int> statusID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="JobXML", DbType="Xml")] System.Xml.Linq.XElement jobXML, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreatedDate", DbType="DateTime")] System.Nullable<System.DateTime> createdDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, statusID, jobXML, createdDate);
			return ((ISingleResult<Job>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Job_GetUnfinishedJobs")]
		public ISingleResult<Job> Job_GetUnfinishedJobs()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Job>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Job_GetBy")]
		public ISingleResult<Job> Job_GetBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusID", DbType="Int")] System.Nullable<int> statusID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="JobXML", DbType="NVarChar(MAX)")] string jobXML, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreatedDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> createdDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAND", DbType="Bit")] System.Nullable<bool> isAND)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, statusID, jobXML, createdDate, isAND);
			return ((ISingleResult<Job>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Job_Insert")]
		public ISingleResult<Job> Job_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusID", DbType="Int")] System.Nullable<int> statusID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="JobXML", DbType="VarChar(MAX)")] string jobXML)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusID, jobXML);
			return ((ISingleResult<Job>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agent")]
	public partial class Agent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<ExecutionSlot> _ExecutionSlots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Agent()
		{
			this._ExecutionSlots = new EntitySet<ExecutionSlot>(new Action<ExecutionSlot>(this.attach_ExecutionSlots), new Action<ExecutionSlot>(this.detach_ExecutionSlots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agent_ExecutionSlot", Storage="_ExecutionSlots", ThisKey="ID", OtherKey="AgentID")]
		public EntitySet<ExecutionSlot> ExecutionSlots
		{
			get
			{
				return this._ExecutionSlots;
			}
			set
			{
				this._ExecutionSlots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExecutionSlots(ExecutionSlot entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_ExecutionSlots(ExecutionSlot entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Status()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Job", Storage="_Jobs", ThisKey="ID", OtherKey="StatusID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Assembly]")]
	public partial class Assembly : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DestinationID;
		
		private string _Version;
		
		private string _Name;
		
		private string _Filename;
		
		private System.DateTime _CreatedDate;
		
		private EntitySet<Plugin> _Plugins;
		
		private EntityRef<Destination> _Destination;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDestinationIDChanging(int value);
    partial void OnDestinationIDChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Assembly()
		{
			this._Plugins = new EntitySet<Plugin>(new Action<Plugin>(this.attach_Plugins), new Action<Plugin>(this.detach_Plugins));
			this._Destination = default(EntityRef<Destination>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationID", DbType="Int NOT NULL")]
		public int DestinationID
		{
			get
			{
				return this._DestinationID;
			}
			set
			{
				if ((this._DestinationID != value))
				{
					if (this._Destination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationID = value;
					this.SendPropertyChanged("DestinationID");
					this.OnDestinationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_Plugin", Storage="_Plugins", ThisKey="ID", OtherKey="AssemblyID")]
		public EntitySet<Plugin> Plugins
		{
			get
			{
				return this._Plugins;
			}
			set
			{
				this._Plugins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Assembly", Storage="_Destination", ThisKey="DestinationID", OtherKey="ID", IsForeignKey=true)]
		public Destination Destination
		{
			get
			{
				return this._Destination.Entity;
			}
			set
			{
				Destination previousValue = this._Destination.Entity;
				if (((previousValue != value) 
							|| (this._Destination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Destination.Entity = null;
						previousValue.Assemblies.Remove(this);
					}
					this._Destination.Entity = value;
					if ((value != null))
					{
						value.Assemblies.Add(this);
						this._DestinationID = value.ID;
					}
					else
					{
						this._DestinationID = default(int);
					}
					this.SendPropertyChanged("Destination");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plugins(Plugin entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = this;
		}
		
		private void detach_Plugins(Plugin entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Destination")]
	public partial class Destination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _WriteURL;
		
		private string _ReadURL;
		
		private EntitySet<Assembly> _Assemblies;
		
		private EntitySet<WatchFolder> _WatchFolders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWriteURLChanging(string value);
    partial void OnWriteURLChanged();
    partial void OnReadURLChanging(string value);
    partial void OnReadURLChanged();
    #endregion
		
		public Destination()
		{
			this._Assemblies = new EntitySet<Assembly>(new Action<Assembly>(this.attach_Assemblies), new Action<Assembly>(this.detach_Assemblies));
			this._WatchFolders = new EntitySet<WatchFolder>(new Action<WatchFolder>(this.attach_WatchFolders), new Action<WatchFolder>(this.detach_WatchFolders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteURL", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string WriteURL
		{
			get
			{
				return this._WriteURL;
			}
			set
			{
				if ((this._WriteURL != value))
				{
					this.OnWriteURLChanging(value);
					this.SendPropertyChanging();
					this._WriteURL = value;
					this.SendPropertyChanged("WriteURL");
					this.OnWriteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadURL", DbType="VarChar(1024)")]
		public string ReadURL
		{
			get
			{
				return this._ReadURL;
			}
			set
			{
				if ((this._ReadURL != value))
				{
					this.OnReadURLChanging(value);
					this.SendPropertyChanging();
					this._ReadURL = value;
					this.SendPropertyChanged("ReadURL");
					this.OnReadURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Assembly", Storage="_Assemblies", ThisKey="ID", OtherKey="DestinationID")]
		public EntitySet<Assembly> Assemblies
		{
			get
			{
				return this._Assemblies;
			}
			set
			{
				this._Assemblies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_WatchFolder", Storage="_WatchFolders", ThisKey="ID", OtherKey="DestinationID")]
		public EntitySet<WatchFolder> WatchFolders
		{
			get
			{
				return this._WatchFolders;
			}
			set
			{
				this._WatchFolders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assemblies(Assembly entity)
		{
			this.SendPropertyChanging();
			entity.Destination = this;
		}
		
		private void detach_Assemblies(Assembly entity)
		{
			this.SendPropertyChanging();
			entity.Destination = null;
		}
		
		private void attach_WatchFolders(WatchFolder entity)
		{
			this.SendPropertyChanging();
			entity.Destination = this;
		}
		
		private void detach_WatchFolders(WatchFolder entity)
		{
			this.SendPropertyChanging();
			entity.Destination = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutionSlot")]
	public partial class ExecutionSlot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AgentID;
		
		private int _MaxSlots;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<ExecutionSlot_Plugin_Join> _ExecutionSlot_Plugin_Joins;
		
		private EntityRef<Agent> _Agent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAgentIDChanging(int value);
    partial void OnAgentIDChanged();
    partial void OnMaxSlotsChanging(int value);
    partial void OnMaxSlotsChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public ExecutionSlot()
		{
			this._ExecutionSlot_Plugin_Joins = new EntitySet<ExecutionSlot_Plugin_Join>(new Action<ExecutionSlot_Plugin_Join>(this.attach_ExecutionSlot_Plugin_Joins), new Action<ExecutionSlot_Plugin_Join>(this.detach_ExecutionSlot_Plugin_Joins));
			this._Agent = default(EntityRef<Agent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgentID", DbType="Int NOT NULL")]
		public int AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxSlots", DbType="Int NOT NULL")]
		public int MaxSlots
		{
			get
			{
				return this._MaxSlots;
			}
			set
			{
				if ((this._MaxSlots != value))
				{
					this.OnMaxSlotsChanging(value);
					this.SendPropertyChanging();
					this._MaxSlots = value;
					this.SendPropertyChanged("MaxSlots");
					this.OnMaxSlotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionSlot_ExecutionSlot_Plugin_Join", Storage="_ExecutionSlot_Plugin_Joins", ThisKey="ID", OtherKey="ExecutionSlotID")]
		public EntitySet<ExecutionSlot_Plugin_Join> ExecutionSlot_Plugin_Joins
		{
			get
			{
				return this._ExecutionSlot_Plugin_Joins;
			}
			set
			{
				this._ExecutionSlot_Plugin_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agent_ExecutionSlot", Storage="_Agent", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.ExecutionSlots.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.ExecutionSlots.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(int);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExecutionSlot_Plugin_Joins(ExecutionSlot_Plugin_Join entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionSlot = this;
		}
		
		private void detach_ExecutionSlot_Plugin_Joins(ExecutionSlot_Plugin_Join entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionSlot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutionSlot_Plugin_Join")]
	public partial class ExecutionSlot_Plugin_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExecutionSlotID;
		
		private int _PluginID;
		
		private EntityRef<ExecutionSlot> _ExecutionSlot;
		
		private EntityRef<Plugin> _Plugin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionSlotIDChanging(int value);
    partial void OnExecutionSlotIDChanged();
    partial void OnPluginIDChanging(int value);
    partial void OnPluginIDChanged();
    #endregion
		
		public ExecutionSlot_Plugin_Join()
		{
			this._ExecutionSlot = default(EntityRef<ExecutionSlot>);
			this._Plugin = default(EntityRef<Plugin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionSlotID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExecutionSlotID
		{
			get
			{
				return this._ExecutionSlotID;
			}
			set
			{
				if ((this._ExecutionSlotID != value))
				{
					if (this._ExecutionSlot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionSlotIDChanging(value);
					this.SendPropertyChanging();
					this._ExecutionSlotID = value;
					this.SendPropertyChanged("ExecutionSlotID");
					this.OnExecutionSlotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PluginID
		{
			get
			{
				return this._PluginID;
			}
			set
			{
				if ((this._PluginID != value))
				{
					if (this._Plugin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginIDChanging(value);
					this.SendPropertyChanging();
					this._PluginID = value;
					this.SendPropertyChanged("PluginID");
					this.OnPluginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionSlot_ExecutionSlot_Plugin_Join", Storage="_ExecutionSlot", ThisKey="ExecutionSlotID", OtherKey="ID", IsForeignKey=true)]
		public ExecutionSlot ExecutionSlot
		{
			get
			{
				return this._ExecutionSlot.Entity;
			}
			set
			{
				ExecutionSlot previousValue = this._ExecutionSlot.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionSlot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionSlot.Entity = null;
						previousValue.ExecutionSlot_Plugin_Joins.Remove(this);
					}
					this._ExecutionSlot.Entity = value;
					if ((value != null))
					{
						value.ExecutionSlot_Plugin_Joins.Add(this);
						this._ExecutionSlotID = value.ID;
					}
					else
					{
						this._ExecutionSlotID = default(int);
					}
					this.SendPropertyChanged("ExecutionSlot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_ExecutionSlot_Plugin_Join", Storage="_Plugin", ThisKey="PluginID", OtherKey="ID", IsForeignKey=true)]
		public Plugin Plugin
		{
			get
			{
				return this._Plugin.Entity;
			}
			set
			{
				Plugin previousValue = this._Plugin.Entity;
				if (((previousValue != value) 
							|| (this._Plugin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plugin.Entity = null;
						previousValue.ExecutionSlot_Plugin_Joins.Remove(this);
					}
					this._Plugin.Entity = value;
					if ((value != null))
					{
						value.ExecutionSlot_Plugin_Joins.Add(this);
						this._PluginID = value.ID;
					}
					else
					{
						this._PluginID = default(int);
					}
					this.SendPropertyChanged("Plugin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plugin")]
	public partial class Plugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AssemblyID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Classname;
		
		private System.DateTime _CreatedDate;
		
		private EntitySet<ExecutionSlot_Plugin_Join> _ExecutionSlot_Plugin_Joins;
		
		private EntityRef<Assembly> _Assembly;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssemblyIDChanging(int value);
    partial void OnAssemblyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnClassnameChanging(string value);
    partial void OnClassnameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Plugin()
		{
			this._ExecutionSlot_Plugin_Joins = new EntitySet<ExecutionSlot_Plugin_Join>(new Action<ExecutionSlot_Plugin_Join>(this.attach_ExecutionSlot_Plugin_Joins), new Action<ExecutionSlot_Plugin_Join>(this.detach_ExecutionSlot_Plugin_Joins));
			this._Assembly = default(EntityRef<Assembly>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyID", DbType="Int NOT NULL")]
		public int AssemblyID
		{
			get
			{
				return this._AssemblyID;
			}
			set
			{
				if ((this._AssemblyID != value))
				{
					if (this._Assembly.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssemblyIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyID = value;
					this.SendPropertyChanged("AssemblyID");
					this.OnAssemblyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classname", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Classname
		{
			get
			{
				return this._Classname;
			}
			set
			{
				if ((this._Classname != value))
				{
					this.OnClassnameChanging(value);
					this.SendPropertyChanging();
					this._Classname = value;
					this.SendPropertyChanged("Classname");
					this.OnClassnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_ExecutionSlot_Plugin_Join", Storage="_ExecutionSlot_Plugin_Joins", ThisKey="ID", OtherKey="PluginID")]
		public EntitySet<ExecutionSlot_Plugin_Join> ExecutionSlot_Plugin_Joins
		{
			get
			{
				return this._ExecutionSlot_Plugin_Joins;
			}
			set
			{
				this._ExecutionSlot_Plugin_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_Plugin", Storage="_Assembly", ThisKey="AssemblyID", OtherKey="ID", IsForeignKey=true)]
		public Assembly Assembly
		{
			get
			{
				return this._Assembly.Entity;
			}
			set
			{
				Assembly previousValue = this._Assembly.Entity;
				if (((previousValue != value) 
							|| (this._Assembly.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assembly.Entity = null;
						previousValue.Plugins.Remove(this);
					}
					this._Assembly.Entity = value;
					if ((value != null))
					{
						value.Plugins.Add(this);
						this._AssemblyID = value.ID;
					}
					else
					{
						this._AssemblyID = default(int);
					}
					this.SendPropertyChanged("Assembly");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExecutionSlot_Plugin_Joins(ExecutionSlot_Plugin_Join entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = this;
		}
		
		private void detach_ExecutionSlot_Plugin_Joins(ExecutionSlot_Plugin_Join entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssemblyInfo")]
	public partial class AssemblyInfo
	{
		
		private int _ID;
		
		private string _Version;
		
		private string _Name;
		
		private string _Filename;
		
		private string _WriteURL;
		
		private string _ReadURL;
		
		private System.DateTime _CreatedDate;
		
		public AssemblyInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this._Filename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteURL", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string WriteURL
		{
			get
			{
				return this._WriteURL;
			}
			set
			{
				if ((this._WriteURL != value))
				{
					this._WriteURL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadURL", DbType="VarChar(2048)")]
		public string ReadURL
		{
			get
			{
				return this._ReadURL;
			}
			set
			{
				if ((this._ReadURL != value))
				{
					this._ReadURL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PluginInfo")]
	public partial class PluginInfo
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _Version;
		
		private string _Description;
		
		private string _Classname;
		
		private string _Assembly;
		
		private string _Filename;
		
		private string _WriteURL;
		
		private string _ReadURL;
		
		private System.DateTime _CreatedDate;
		
		public PluginInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classname", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Classname
		{
			get
			{
				return this._Classname;
			}
			set
			{
				if ((this._Classname != value))
				{
					this._Classname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Assembly]", Storage="_Assembly", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Assembly
		{
			get
			{
				return this._Assembly;
			}
			set
			{
				if ((this._Assembly != value))
				{
					this._Assembly = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this._Filename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteURL", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string WriteURL
		{
			get
			{
				return this._WriteURL;
			}
			set
			{
				if ((this._WriteURL != value))
				{
					this._WriteURL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadURL", DbType="VarChar(2048)")]
		public string ReadURL
		{
			get
			{
				return this._ReadURL;
			}
			set
			{
				if ((this._ReadURL != value))
				{
					this._ReadURL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WatchFolder")]
	public partial class WatchFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DestinationID;
		
		private string _Filter;
		
		private System.Xml.Linq.XElement _WorkflowXML;
		
		private System.DateTime _DateCreated;
		
		private bool _IsEnabled;
		
		private EntityRef<Destination> _Destination;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDestinationIDChanging(int value);
    partial void OnDestinationIDChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnWorkflowXMLChanging(System.Xml.Linq.XElement value);
    partial void OnWorkflowXMLChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    #endregion
		
		public WatchFolder()
		{
			this._Destination = default(EntityRef<Destination>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationID", DbType="Int NOT NULL")]
		public int DestinationID
		{
			get
			{
				return this._DestinationID;
			}
			set
			{
				if ((this._DestinationID != value))
				{
					if (this._Destination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationID = value;
					this.SendPropertyChanged("DestinationID");
					this.OnDestinationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="NVarChar(MAX)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowXML", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement WorkflowXML
		{
			get
			{
				return this._WorkflowXML;
			}
			set
			{
				if ((this._WorkflowXML != value))
				{
					this.OnWorkflowXMLChanging(value);
					this.SendPropertyChanging();
					this._WorkflowXML = value;
					this.SendPropertyChanged("WorkflowXML");
					this.OnWorkflowXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_WatchFolder", Storage="_Destination", ThisKey="DestinationID", OtherKey="ID", IsForeignKey=true)]
		public Destination Destination
		{
			get
			{
				return this._Destination.Entity;
			}
			set
			{
				Destination previousValue = this._Destination.Entity;
				if (((previousValue != value) 
							|| (this._Destination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Destination.Entity = null;
						previousValue.WatchFolders.Remove(this);
					}
					this._Destination.Entity = value;
					if ((value != null))
					{
						value.WatchFolders.Add(this);
						this._DestinationID = value.ID;
					}
					else
					{
						this._DestinationID = default(int);
					}
					this.SendPropertyChanged("Destination");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTemplate")]
	public partial class JobTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _JobTemplateUri;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnJobTemplateUriChanging(string value);
    partial void OnJobTemplateUriChanged();
    #endregion
		
		public JobTemplate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTemplateUri", DbType="NVarChar(MAX)")]
		public string JobTemplateUri
		{
			get
			{
				return this._JobTemplateUri;
			}
			set
			{
				if ((this._JobTemplateUri != value))
				{
					this.OnJobTemplateUriChanging(value);
					this.SendPropertyChanging();
					this._JobTemplateUri = value;
					this.SendPropertyChanged("JobTemplateUri");
					this.OnJobTemplateUriChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StatusID;
		
		private System.Xml.Linq.XElement _JobXML;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _LastUpdated;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnJobXMLChanging(System.Xml.Linq.XElement value);
    partial void OnJobXMLChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public Job()
		{
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobXML", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement JobXML
		{
			get
			{
				return this._JobXML;
			}
			set
			{
				if ((this._JobXML != value))
				{
					this.OnJobXMLChanging(value);
					this.SendPropertyChanging();
					this._JobXML = value;
					this.SendPropertyChanged("JobXML");
					this.OnJobXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Job", Storage="_Status", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._StatusID = value.ID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
